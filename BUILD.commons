# ==================================================================================================
# Copyright 2011 Twitter, Inc.
# --------------------------------------------------------------------------------------------------
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this work except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file, or at:
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==================================================================================================

import os
import sys

from contextlib import contextmanager
from zipfile import ZipFile

from twitter.common.python.pexbuilder import PexBuilder

from twitter.pants import goal, is_internal, is_java
from twitter.pants.base.build_file import BuildFile
from twitter.pants.base.parse_context import ParseContext
from twitter.pants.python.python_chroot import PythonChroot
from twitter.pants.targets import JvmBinary
from twitter.pants.tasks import Task

def reinstall():
  pex = os.path.join(ROOT_DIR, 'pants.pex')
  def build_pex():
    pants_exe = pants('src/python/twitter/pants').resolve().next()
    chroot = PythonChroot(pants_exe, ROOT_DIR)
    PexBuilder(chroot.dump()).write(pex)
  ParseContext(BuildFile(ROOT_DIR, os.path.basename(__file__))).do_in_context(build_pex)

  print '\nPants reinstalled from live local source.'

  # TODO(John Sirois): remove 'goal' when pants.new -> pants
  args = ['pants.pex', 'goal']

  # When we re-run, pass on the remaining goals and flags so we can pick up where we leave off here.
  index = sys.argv.index('reinstall')
  args.extend(sys.argv[index+1:])
  print 'Respawning with: %s\n' % ' '.join(args)

  sys.stdout.flush()
  sys.stderr.flush()
  os.execv(pex, args)

goal(
  name='reinstall',
  action=reinstall,
).install().with_description('Reinstalls pants from the current source tree.')


RESOURCE_RELDIR = 'com/twitter/common/args/apt'
RESOURCE_BASENAME = 'cmdline.arg.info.txt'


class ArgsResourceMapper(Task):
  """Maps resource files generated by com.twitter.common#args-apt into a binary jar."""

  @classmethod
  def setup_parser(cls, option_group, args, mkflag):
    option_group.add_option(mkflag("include_all"), mkflag("include_all", negate=True),
                            dest="args_resource_mapper_include_all", default=False,
                            action="callback", callback=mkflag.set_bool,
                            help="[%default] Include all arg fields resources.")

  @staticmethod
  def _is_binary(target):
    return isinstance(target, JvmBinary)

  def __init__(self, context):
    Task.__init__(self, context)

    context.products.require('jars', ArgsResourceMapper._is_binary)
    self.classdirs = context.config.getlist('args-resource-mapper', 'classdirs')
    self.include_all = context.options.args_resource_mapper_include_all

  def execute(self, targets):
    if self.classdirs:
      jarmap = self.context.products.get('jars')
      for binary in filter(ArgsResourceMapper._is_binary, targets):
        for basedir, jars in jarmap.get(binary).items():
          for jar in jars:
            self._addargsresources(os.path.join(basedir, jar), binary)

  def _addargsresources(self, jar, binary):
    lines = set()
    for resourcedir in [os.path.join(classdir, RESOURCE_RELDIR) for classdir in self.classdirs]:
      if os.path.exists(resourcedir):
        for file in os.listdir(resourcedir):
          if file.startswith(RESOURCE_BASENAME):
            with open(os.path.join(resourcedir, file)) as resource:
              lines.update(resource.readlines())

    if lines:
      class BinaryArgs(object):
        def __init__(self):
          self.classnames = set()
          def add_clasnames(target):
            # TODO(John Sirois): this does not handle scala - re-use the
            # twitter.pants.tasks.scala_compile.ScalaCompiler#findclasses scanner to map sources to
            # classes?
            if is_java(target):
              self.classnames.update(src.replace('/', '.').replace('.java', '')
                                     for src in target.sources)
          binary.walk(add_clasnames, is_internal)

        def matches(self, line):
          line = line.strip()
          if not line:
            return False
          components = line.split(' ')
          keyname = components[0]
          return keyname not in ('field', 'positional') or components[1] in self.classnames

      self._addargs(lines if self.include_all else filter(BinaryArgs().matches, lines), jar, binary)

  @contextmanager
  def _open_jar(self, path):
    jar = ZipFile(path, 'a')
    yield jar
    jar.close()

  def _addargs(self, lines, jarfile, binary):
    resource = os.path.join(RESOURCE_RELDIR, '%s.0' % RESOURCE_BASENAME)

    content = '# Created by pants goal binary:args-apt\n'
    content += ''.join(sorted(lines))

    with self._open_jar(jarfile) as jar:
      jar.writestr(resource, content)
      self.context.log.debug('Added args-apt resource file %s for %s:'
                             '\n%s' % (resource, binary, content))

goal(name='args-apt', action=ArgsResourceMapper).install('binary')
